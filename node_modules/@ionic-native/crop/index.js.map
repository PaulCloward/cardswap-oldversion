{"version":3,"sources":["../../../src/@ionic-native/plugins/crop/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;GAiBG;AASH;IAA0B,wBAAiB;IAA3C;;IAmBA,CAAC;IAjBC;;;;;OAKG;IAIH,mBAAI,GAAJ,UAAK,WAAmB,EAAE,OAA6B,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEhF,eAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAPA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oCACmF;IAX1E,IAAI;QARhB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,qBAAqB;YAC7B,SAAS,EAAE,SAAS;YACpB,IAAI,EAAE,+CAA+C;YACrD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,IAAI,CAmBhB;IAAD,WAAC;CAnBD,AAmBC,CAnByB,iBAAiB,GAmB1C;SAnBY,IAAI","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n/**\r\n * @name Crop\r\n * @description Crops images\r\n * @usage\r\n * ```typescript\r\n * import { Crop } from '@ionic-native/crop';\r\n *\r\n * constructor(private crop: Crop) { }\r\n *\r\n * ...\r\n *\r\n * this.crop.crop('path/to/image.jpg', {quality: 75})\r\n *   .then(\r\n *     newImage => console.log('new image path is: ' + newImage),\r\n *     error => console.error('Error cropping image', error)\r\n *   );\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Crop',\r\n  plugin: 'cordova-plugin-crop',\r\n  pluginRef: 'plugins',\r\n  repo: 'https://github.com/jeduan/cordova-plugin-crop',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class Crop extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Crops an image\r\n   * @param pathToImage\r\n   * @param options\r\n   * @returns {Promise<string>} Returns a promise that resolves with the new image path, or rejects if failed to crop.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  crop(pathToImage: string, options?: { quality: number }): Promise<string> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}